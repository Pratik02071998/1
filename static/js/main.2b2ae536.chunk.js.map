{"version":3,"sources":["components/SearchBar.js","components/WeatherCard.js","components/Favorites.js","app_component/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["SearchBar","props","state","value","warning","handleChange","bind","sendValueToParent","event","this","setState","target","preventDefault","trim","match","callBackFromParent","errorMessage","Message","error","header","content","warningMessage","className","Form","onSubmit","Input","placeholder","action","icon","onChange","size","type","autoFocus","Component","WeatherCard","saveDataToLocalStorage","deleteDataFromLocalStorage","existingCities","JSON","parse","localStorage","getItem","indexOfCity","indexOf","weatherData","city","splice","setItem","stringify","push","weather","country","temp","celcius","Math","round","saveBtn","Button","positive","onClick","deleteBtn","negative","savedCities","id","main","includes","Favorites","getWeather","cityElements","map","Footer","React","App","searchDone","hasSavedCities","callWeatherData","updateSavedCities","url","fetch","then","response","ok","Error","statusText","resp","json","data","weatherObj","name","sys","catch","message","cityArr","hasCities","length","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2b2ae536.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/SearchBar.css\";\nimport { Input, Message, Form } from \"semantic-ui-react\";\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\",\n      warning: false\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.sendValueToParent = this.sendValueToParent.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  sendValueToParent(event) {\n    event.preventDefault();\n    // Check if the input field has been submitted empty or if it contains numbers\n    if (this.state.value.trim() === \"\" || this.state.value.match(/\\d+/g) !== null) {\n      this.setState({ warning: true });\n    } else {\n      this.props.callBackFromParent(this.state.value);\n      this.setState({ warning: false });\n    }\n  }\n\n  render() {\n    const errorMessage = (\n      <Message error header=\"There was an error\" content={this.props.error} />\n    );\n    const warningMessage = (\n      <Message warning header=\"Please check that you've entered a valid city\" />\n    );\n\n    return (\n      <div className=\"SearchBar\">\n        {this.props.error && errorMessage}\n        {this.state.warning && warningMessage}\n        <Form onSubmit={this.sendValueToParent}>\n          <Input\n            className=\"SearchBar-input\"\n            placeholder=\"Search the weather in...\"\n            action={{ icon: \"search\" }}\n            onChange={this.handleChange}\n            value={this.state.value}\n            size=\"huge\"\n            type=\"text\"\n            autoFocus\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport \"../css/WeatherCard.css\";\nimport \"../css/weather-icons.min.css\";\nimport { Button } from \"semantic-ui-react\";\n\nclass WeatherCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.saveDataToLocalStorage = this.saveDataToLocalStorage.bind(this);\n    this.deleteDataFromLocalStorage = this.deleteDataFromLocalStorage.bind(this);\n  }\n\n  deleteDataFromLocalStorage() {\n    const existingCities = JSON.parse(localStorage.getItem(\"cityList\"));\n    const indexOfCity = existingCities.indexOf(this.props.weatherData.city);\n\n    existingCities.splice(indexOfCity, 1);\n    localStorage.setItem(\"cityList\", JSON.stringify(existingCities));\n    this.props.callBackFromParent(existingCities);\n  }\n\n  saveDataToLocalStorage() {\n    // Get data from LocalStorage if there is any and push back with new city\n    const existingCities = JSON.parse(localStorage.getItem(\"cityList\")) || [];\n\n    existingCities.push(this.props.weatherData.city);\n    localStorage.setItem(\"cityList\", JSON.stringify(existingCities));\n    this.props.callBackFromParent(existingCities);\n  }\n\n  render() {\n    const { city, weather, country, temp } = this.props.weatherData;\n    const celcius = Math.round(temp - 273.15);\n    const saveBtn = (\n      <Button\n        positive\n        size=\"mini\"\n        onClick={this.saveDataToLocalStorage}\n        content=\"Save to favorites\"\n      />\n    );\n    const deleteBtn = (\n      <Button\n        negative\n        size=\"mini\"\n        onClick={this.deleteDataFromLocalStorage}\n        content=\"Delete from favorites\"\n      />\n    );\n    const existingCities = this.props.savedCities;\n\n    return (\n      <div className=\"WeatherCard\">\n        <h1 className=\"WeatherCard-degrees\">{celcius}Â°</h1>\n        <div className=\"WeatherCard-icon-container\">\n          <i className={`wi wi-owm-${weather[0].id} WeatherCard-icon`} />\n          <p>{weather[0].main}</p>\n        </div>\n        <h2 className=\"WeatherCard-city\">\n          {city}, {country}\n        </h2>\n        {existingCities.includes(city) ? deleteBtn : saveBtn}\n      </div>\n    );\n  }\n}\n\nexport default WeatherCard;\n","import React, { Component } from \"react\";\nimport \"../css/Favorites.css\";\nimport { Button } from \"semantic-ui-react\";\n\nclass Favorites extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeather = this.getWeather.bind(this);\n  }\n\n  getWeather(event) {\n    this.props.callBackFromParent(event.target.value);\n  }\n\n  render() {\n    let cityElements = this.props.savedCities.map((city) => {\n      return <Button className=\"Favorites-btn\" size=\"tiny\" value={city} key={`${city}-button`} onClick={this.getWeather} content={city} />;\n    });\n\n    return (\n      <div className=\"Favorites\">\n        <h3 className=\"Favorites-title\">My favorite cities</h3>\n        <div className=\"Favorites-button-container\">\n          {cityElements}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Favorites;\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {}\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <footer className=\"footer_style\"><div>Â© 2020 Developed by Pratik Mehta. All Rights Reserved.</div></footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","import React, { Component } from \"react\";\nimport \"./css/App.css\";\n\nimport SearchBar from \"./components/SearchBar\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport Favorites from \"./components/Favorites\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Footer from \"./app_component/Footer\";\n\nconst API_KEY = \"429736441cf3572838aa10530929f7cd\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: {\n        weather: \"\",\n        city: \"\",\n        country: \"\",\n        temp: 0\n      },\n      searchDone: false,\n      savedCities: [],\n      hasSavedCities: false,\n      errorMessage: \"\"\n    };\n\n    this.callWeatherData = this.callWeatherData.bind(this);\n    this.updateSavedCities = this.updateSavedCities.bind(this);\n  }\n\n  callWeatherData(city) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}`;\n    fetch(url)\n      .then(handleErrors)\n      .then(resp => resp.json())\n      .then(data => {\n        const weatherObj = {\n          weather: data.weather,\n          city: data.name,\n          country: data.sys.country,\n          temp: data.main.temp\n        };\n        this.setState({\n          weatherData: weatherObj,\n          searchDone: true,\n          errorMessage: \"\"\n        });\n      })\n      .catch(error => {\n        // If an error is catch, it's sent to SearchBar as props\n        this.setState({ errorMessage: error.message });\n      });\n\n    function handleErrors(response) {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    }\n  }\n\n  updateSavedCities(cityArr) {\n    // hasCities is set to true if length is more than 0, otherwise false\n    const hasCities = cityArr.length > 0;\n    this.setState({ savedCities: cityArr, hasSavedCities: hasCities });\n  }\n\n  componentWillMount() {\n    // See if there's saved cities in localStorage before the App is mounted\n    // Tests didn't like parsing when localStorage.getItem was undefined, so this was my solution for it\n    let existingCities = JSON.parse(localStorage.getItem(\"cityList\") || \"[]\");\n\n    if (existingCities.length !== 0) {\n      this.setState({\n        hasSavedCities: true,\n        savedCities: existingCities\n      });\n    }\n  }\n\n  render() {\n    const {\n      searchDone,\n      weatherData,\n      hasSavedCities,\n      savedCities,\n      errorMessage\n    } = this.state;\n    \n    return (\n      <div className=\"App\">\n        <SearchBar\n          callBackFromParent={this.callWeatherData}\n          error={errorMessage}\n        />\n        {searchDone && (\n          <WeatherCard\n            weatherData={weatherData}\n            savedCities={savedCities}\n            callBackFromParent={this.updateSavedCities}\n          />\n        )}\n        {hasSavedCities && (\n          <Favorites\n            savedCities={savedCities}\n            callBackFromParent={this.callWeatherData}\n          />\n        )}\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}